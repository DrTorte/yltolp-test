apiVersion: v1
kind: Pod
metadata:
  name: pytest-app
  labels:
    app: pytest-pod
spec:
  containers:
  - name: pytest
    image: localhost:32000/pytest:registry ## local image here
    # image: pytest/app:latest ##external image
    # imagePullPolicy: Never # This is intended for avoiding issues with attempting to pull the image from online, and can be disabled if an external image registry is used.
    env:
      - name: db_root_password
        value: APasswordSuitableForRoot
      - name: db_name
        value: pytest
      - name: MYSQL_SERVICE_PORT
        value: "3306"
    ports:
      - containerPort: 5000
  - name: pytest-mysql
    image: mysql:8.1.0
    env:
      - name: MYSQL_ROOT_PASSWORD
        value: APasswordSuitableForRoot
      - name: MYSQL_PASSWORD
        value: APasswordSuitableForNotRoot
      - name: MYSQL_DATABASE
        value: pytest
    ports:
      - containerPort: 3306
    volumeMounts:
      - name: mysql-initdb
        mountPath: /docker-entrypoint-initdb.d
  volumes:
    - name: mysql-initdb
      configMap:
        name: mysql-initdb-config
    - name: mysql-data
      persistentVolumeClaim:
        claimName: mysql-data-disk

---
apiVersion: v1
kind: Service
metadata:
  name: pytest-service
spec:
  type: NodePort
  selector:
    app: pytest-pod

  ports:
    - port: 5000
      targetPort: 5000

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-initdb-config
data:
  init.sql: |
    CREATE DATABASE IF NOT EXISTS pytest;
    USE pytest;
    CREATE TABLE users (user_id INT NOT NULL AUTO_INCREMENT, user_name VARCHAR(256) NOT NULL, user_email VARCHAR(256) NOT NULL, user_password VARCHAR(256) NOT NULL, PRIMARY KEY(user_id));
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-data-disk
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
